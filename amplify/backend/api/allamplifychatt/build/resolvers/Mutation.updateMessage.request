## No Static Group Authorization Rules **


#if( ! $isStaticGroupAuthorized )
  ## No Dynamic Group Authorization Rules **


  ## [Start] Owner Authorization Checks **
  #set( $ownerAuthExpressions = [] )
  #set( $ownerAuthExpressionValues = {} )
  #set( $ownerAuthExpressionNames = {} )
  ## Authorization rule: { allow: "owner", ownerField: "authorId", identityField: "cognito:username" } **
  $util.qr($ownerAuthExpressions.add("#owner0 = :identity0"))
  $util.qr($ownerAuthExpressionNames.put("#owner0", "authorId"))
  $util.qr($ownerAuthExpressionValues.put(":identity0", $util.dynamodb.toDynamoDB($util.defaultIfNull($ctx.identity.claims.get("username"), $util.defaultIfNull($ctx.identity.claims.get("cognito:username"), "___xamznone____")))))
  ## [End] Owner Authorization Checks **


  ## [Start] Collect Auth Condition **
  #set( $authCondition = {
  "expression": "",
  "expressionNames": {},
  "expressionValues": {}
} )
  #set( $totalAuthExpression = "" )
  ## Add dynamic group auth conditions if they exist **
  #if( $groupAuthExpressions )
    #foreach( $authExpr in $groupAuthExpressions )
      #set( $totalAuthExpression = "$totalAuthExpression $authExpr" )
      #if( $foreach.hasNext )
        #set( $totalAuthExpression = "$totalAuthExpression OR" )
      #end
    #end
  #end
  #if( $groupAuthExpressionNames )
    $util.qr($authCondition.expressionNames.putAll($groupAuthExpressionNames))
  #end
  #if( $groupAuthExpressionValues )
    $util.qr($authCondition.expressionValues.putAll($groupAuthExpressionValues))
  #end
  ## Add owner auth conditions if they exist **
  #if( $totalAuthExpression != "" && $ownerAuthExpressions && $ownerAuthExpressions.size() > 0 )
    #set( $totalAuthExpression = "$totalAuthExpression OR" )
  #end
  #if( $ownerAuthExpressions )
    #foreach( $authExpr in $ownerAuthExpressions )
      #set( $totalAuthExpression = "$totalAuthExpression $authExpr" )
      #if( $foreach.hasNext )
        #set( $totalAuthExpression = "$totalAuthExpression OR" )
      #end
    #end
  #end
  #if( $ownerAuthExpressionNames )
    $util.qr($authCondition.expressionNames.putAll($ownerAuthExpressionNames))
  #end
  #if( $ownerAuthExpressionValues )
    $util.qr($authCondition.expressionValues.putAll($ownerAuthExpressionValues))
  #end
  ## Set final expression if it has changed. **
  #if( $totalAuthExpression != "" )
    #set( $authCondition.expression = "($totalAuthExpression)" )
  #end
  ## [End] Collect Auth Condition **
#end


## [Start] Throw if unauthorized **
#if( !($isStaticGroupAuthorized == true || ($authCondition && $authCondition.expression != "")) )
  $util.unauthorized()
#end
## [End] Throw if unauthorized **

#if( $authCondition && $authCondition.expression != "" )
  #set( $condition = $authCondition )
  $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
  $util.qr($condition.expressionNames.put("#id", "id"))
#else
  #set( $condition = {
  "expression": "attribute_exists(#id)",
  "expressionNames": {
      "#id": "id"
  },
  "expressionValues": {}
} )
#end
## Automatically set the updatedAt timestamp. **
$util.qr($context.args.input.put("updatedAt", $util.time.nowISO8601()))
$util.qr($context.args.input.put("__typename", "Message"))
## Update condition if type is @versioned **
#if( $versionedCondition )
  $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
#end
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, ["id"]).entrySet() )
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add("#$entry.key") )
    $util.qr($expNames.put("#$entry.key", "$entry.key"))
  #else
    $util.qr($expSet.put("#$entry.key", ":$entry.key"))
    $util.qr($expNames.put("#$entry.key", "$entry.key"))
    $util.qr($expValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = "" )
#if( !$expSet.isEmpty() )
  #set( $expression = "SET" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = "$expression $entry.key = $entry.value" )
    #if( $foreach.hasNext() )
      #set( $expression = "$expression," )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = "$expression ADD" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = "$expression $entry.key $entry.value" )
    #if( $foreach.hasNext() )
      #set( $expression = "$expression," )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = "$expression REMOVE" )
  #foreach( $entry in $expRemove )
    #set( $expression = "$expression $entry" )
    #if( $foreach.hasNext() )
      #set( $expression = "$expression," )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put("expression", "$expression"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put("expressionNames", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put("expressionValues", $expValues))
#end
{
  "version": "2017-02-28",
  "operation": "UpdateItem",
  "key": {
      "id": {
          "S": "$context.args.input.id"
    }
  },
  "update": $util.toJson($update),
  "condition": $util.toJson($condition)
}